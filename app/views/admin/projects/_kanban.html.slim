.kanban_state
  p.to_sort_kanban_name
    strong
      = t('words.unclassified_kanban_state').upcase
  .kanban_state_row
    - high_priority_tasks.each do |task|
      - next if task.done?
      = render partial: "admin/tasks/unplanned_task", locals: { task: task, with_project_name: "false", url: kanban_admin_project_path(id: project.id) }
    - todo_tasks.each do |task|
      - next if task.done?
      = render partial: "admin/tasks/unplanned_task", locals: { task: task, with_project_name: "false", url: kanban_admin_project_path(id: project.id) }

- if kanban_states.any?
  - kanban_states.visible.each do |state|
    .kanban_state.sortable data-kanban-state-id=state.id
      p.kanban_name
        strong
          = state.name.upcase
        span.right
          = link_to edit_admin_kanban_state_path(state, url: kanban_admin_project_path(id: project.id) ) do
              i class="ui icon tiny grey-text text-lighten-1 edit"
      .kanban_state_row id="kanban_state_row_#{state.id}"data-kanban-state-id=state.id
        - state.tasks.per_position.each do |task|
          = render partial: "admin/tasks/unplanned_task", locals: { task: task, with_project_name: "false", url: kanban_admin_project_path(id: project.id) }
  .kanban_state
    p
      strong #{link_to t('actions.add_new_kanban_state'), new_admin_kanban_state_url(project_id: project.id, url: kanban_admin_project_path(id: project.id))}
- else
  .row
    .col-lg-12.text-center
      h4 #{t('words.no_kanban_state_yet')}
      h5 #{t('.kanban_states_hint')}
      p #{t('.kanban_explaination')}
      p #{link_to t('actions.create'), new_admin_kanban_state_url(project_id: project.id, url: kanban_admin_project_path(id: project.id))}

